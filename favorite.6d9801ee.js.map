{"mappings":"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","sources":["src/js/toggle.js","src/js/active.js","src/js/weather.js"],"sourcesContent":["var colorState = localStorage.getItem(\"colorState\") || \"#fff\";\nvar toggleState = localStorage.getItem(\"toggleState\") || \"off\";\nvar toggleSwitch = document.querySelector('.toggle input[type=\"checkbox\"]');\nvar element = document.getElementById(\"myElement\");\nvar body = document.getElementsByTagName(\"body\")[0];\nvar element_light = document.getElementById(\"dark\");\nvar element_dark = document.getElementById(\"light\");\nvar menuLinks = document.querySelectorAll('.menu_link');\nvar menu_items = document.querySelectorAll(\".menu_item\");\nvar header = document.getElementsByTagName(\"header\")[0];\nvar search_box = document.getElementsByTagName(\"input\")[0];\nvar input = document.querySelector('.search-box');\n\nfunction toggleColor() {\n  if (toggleSwitch.checked) {\n    body.style.backgroundColor = \"#2E2E2E\";\n    body.style.color = \"#fff\";\n    element.style.color = \"#fff\";\n    colorState = \"#2E2E2E\";\n    element_dark.style.color = \"#5F6775\";\n    element_light.style.color = \"#4B48DB\";\n    menuLinks.forEach(function(link) {\n      link.classList.add('color-switch');\n    });\n    // menu_items.forEach(function(item) {\n    //   item.style.border = \"1px solid rgba(244, 244, 244, 0.2)\";\n    // });\n    header.classList.add(\"dark-border\");\n    search_box.classList.add(\"background-color-search\");\n    input.classList.add('dark-border-search');\n  } else {\n    body.style.backgroundColor = \"#fff\";\n    body.style.color = \"#000\";\n    element.style.color = \"#000\";\n    colorState = \"#fff\";\n    element_dark.style.color = \"#4B48DB\";\n    element_light.style.color = \"#5F6775\";\n    menuLinks.forEach(function(link) {\n      link.classList.remove('color-switch');\n    });\n    header.classList.remove(\"white-border\");\n    search_box.classList.remove(\"background-color-search\");\n    input.classList.remove('dark-border-search');\n  }\n\n  localStorage.setItem(\"colorState\", colorState);\n  localStorage.setItem(\"toggleState\", toggleSwitch.checked ? \"on\" : \"off\");\n}\n\nif (colorState === \"#2E2E2E\") {\n  toggleSwitch.checked = true;\n  toggleColor();\n} else {\n  toggleSwitch.checked = false;\n}\n\nif (toggleState === \"on\") {\n  toggleSwitch.checked = true;\n} else {\n  toggleSwitch.checked = false;\n}\n\ntoggleSwitch.addEventListener(\"click\", toggleColor);","const liElements = document.querySelectorAll('li');\nconst activeLink = localStorage.getItem('activeLink');\n\n\nif (activeLink) {\n  // add the active class to the saved link\n  const link = document.querySelector(`a[href=\"${activeLink}\"]`);\n  link.parentElement.classList.add('active');\n}\n\nliElements.forEach(function(li) {\n  li.addEventListener('click', function(event) {\n    liElements.forEach(function(li) {\n      li.classList.remove('active');\n    });\n\n    this.classList.add('active');\n    const href = this.querySelector('a').getAttribute('href');\n    localStorage.setItem('activeLink', href);\n  });\n});","import { format } from 'date-fns';\n\nconst API_WETHER_KEY = '8af80306c215ce6fbaa948ab6db624b1';\nconst URL = 'https://api.openweathermap.org/data/2.5/weather?';\n\nasync function fetchWeather() {\n  //   weatherCard.innerHTML = `<div class=\"weather__loading\">\n  //   <img src=\"../images/loading.gif\" alt=\"loading...\">\n\n  //     <div>`;\n  const url = `${URL}q=London&units=metric&appid=${API_WETHER_KEY}`;\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    if (response.ok) {\n      createWeatherCard(data);\n    }\n    // console.log(data);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function fetchWeatherByGeo(lat, lon) {\n  //   weatherCard.innerHTML = `<div class=\"weather__loading\">\n  // <img src=\"../images/loading.gif\" alt=\"loading...\">\n\n  //     div>`;\n  const url = `${URL}lat=${lat}&lon=${lon}&appid=${API_WETHER_KEY}&units=metric`;\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    if (response.ok) {\n      createWeatherCard(data);\n    }\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function getGeoposition() {\n  if (navigator.geolocation) {\n    await navigator.geolocation.getCurrentPosition(\n      ({ coords: { latitude, longitude } }) => {\n        fetchWeatherByGeo(latitude, longitude).then(data => {\n          console.log(data);\n          return data;\n        });\n      }\n    );\n    return;\n  } else {\n    fetchWeather();\n  }\n  return;\n}\n\nfetchWeather();\n\ngetGeoposition();\n\nconst weatherCard = document.querySelector('.weather');\n\nfunction createWeatherCard(data) {\n  console.log(data);\n\n  const location = data.name;\n  const temp = Math.round(data.main.temp);\n  // const feelsLike = Math.round(data.main.feels_like);\n  const day = data.dt;\n  const weatherStatus = data.weather[0].main;\n  const weatherIcon = data.weather[0].icon;\n\n  const card = `<div class=\"weather__info\">\n    <span class=\"weather__deg\">${temp}</span>\n    <div class=\"weather__geo\">\n      <span class=\"weather__value\">${weatherStatus}</span>\n      <p class=\"weather__location\">\n        <svg>\n          <use href=\"./images/sprite-full.svg#geo\"></use>\n        </svg>\n        <span class=\"weather__city\">${location}</span>\n      </p>\n    </div>\n  </div>\n  <img\n    src=\"https://openweathermap.org/img/w/${weatherIcon}.png\"\n    alt=\"${weatherStatus}\"\n    class=\"weather__img\"\n  />\n  <div class=\"weather__date\">\n    <p class=\"weather__day\">${day}</p>\n    <p class=\"weather__year\"></p>\n  </div>\n  <a\n    href=\"https://sinoptik.ua/\"\n    class=\"weather__link\"\n    target=\"_blank\"\n    rel=\"noreferrer noopener\"\n    >weather for week</a\n  >`;\n\n  weatherCard.innerHTML = card;\n}\n"],"names":["$517f5efacfe8d43b$var$colorState","localStorage","getItem","$517f5efacfe8d43b$var$toggleState","$517f5efacfe8d43b$var$toggleSwitch","document","querySelector","$517f5efacfe8d43b$var$element","getElementById","$517f5efacfe8d43b$var$body","getElementsByTagName","$517f5efacfe8d43b$var$element_light","$517f5efacfe8d43b$var$element_dark","$517f5efacfe8d43b$var$menuLinks","querySelectorAll","$517f5efacfe8d43b$var$header","$517f5efacfe8d43b$var$search_box","$517f5efacfe8d43b$var$input","$517f5efacfe8d43b$var$toggleColor","checked","style","backgroundColor","color","forEach","link","classList","add","remove","setItem","addEventListener","$82cfffc3ee961c07$var$liElements","$82cfffc3ee961c07$var$activeLink","parentElement","li1","event","li","this","href","getAttribute","async","$83ee39fa453a4c23$var$fetchWeather","response","fetch","data","json","ok","$83ee39fa453a4c23$var$createWeatherCard","error","console","log","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","lat","lon","url","$83ee39fa453a4c23$var$fetchWeatherByGeo","then","$83ee39fa453a4c23$var$getGeoposition","$83ee39fa453a4c23$var$weatherCard","location","name","temp","Math","round","main","day","dt","weatherStatus","weather","card","icon","innerHTML"],"version":3,"file":"favorite.6d9801ee.js.map"}